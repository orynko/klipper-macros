[gcode_macro set_heater_scaling]
description: Sets scaling parameters for heater. If a new target temperature is
    passed it will be adjusted to the scaling parameters.
    Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
                                [BUMP=<degrees>] [MAXIMUM=<degrees>]
                                [MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters: {}
gcode:
    # If no heater is supplied just list out all the scaled heaters.
    {% if "HEATER" is not in params %}
        {% set output = [] %}
        
        {% for h in scaled_heaters %}
            {% set dummy = output.append(
                    "%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
                        |format(
                            h, 
                            scaled_heaters[h].scale, 
                            scaled_heaters[h].bump,
                            scaled_heaters[h].minimum, 
                            scaled_heaters[h].maximum
                        )
                    ) 
            %}
        {% endfor %}
    
        {% if output %}
            {action_respond_info(output|join('\n'))}{% endif %}
        {% else %}
    
        # See if we need a new scaling entry for this heater.
        {% set HEATER = params.HEATER.lower() %}
        {% set settings = printer.configfile.settings[HEATER] %}
        
        {% if HEATER is not in scaled_heaters %}
            {% set dummy = scaled_heaters.__setitem__(
                    HEATER, {
                        "scale":        1.0,
                        "bump":         0.0, 
                        "minimum":      settings.min_temp,
                        "maximum":      settings.max_temp,
                        "real_target":  printer[HEATER].target
                    }
                ) 
            %}
        {% endif %}
    
        _CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
    
        {% set scales = scaled_heaters[HEATER] %}
        {% set SCALE = params.SCALE|default(scales.scale)|float %}
        {% set BUMP = params.BUMP|default(scales.bump)|float %}
        {% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
        {% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
        {% set TARGET = params.TARGET|default(scales.real_target)|float %}
        {% set dummy = scales.__setitem__("scale", SCALE) %}
        {% set dummy = scales.__setitem__("bump", BUMP) %}
        {% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
        {% set dummy = scales.__setitem__("minimum", MINIMUM) %}
        {% set dummy = scales.__setitem__("real_target", TARGET) %}

        {% set settings = printer.configfile.settings[HEATER] %}
        
        {% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp 
            or MAXIMUM != settings.max_temp 
        %}  
            {% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
        {% else %} # Remove a redundant scaling entry.
            {% set dummy = scaled_heaters.__delitem__(HEATER) %}
        {% endif %}
    
        SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
        {
            action_respond_info(
                "%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
                    |format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET)
            )
        }
    {% endif %}
  
    # Dummy argument block for Mainsail
    {% set dummy = None if True else "
        {% set dummy = params.HEATER|default(e.g. extruder) %}
        {% set dummy = params.SCALE|default(1.0)|float %}
        {% set dummy = params.BUMP|default(0.0)|float %}
        {% set dummy = params.MAXIMUM|default(max_temp)|float %}
        {% set dummy = params.MINIMUM|default(min_temp)|float %}
        {% set dummy = params.TARGET|default(current target)|float %}
        " 
    %} # End argument block for Mainsail