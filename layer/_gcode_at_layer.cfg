[gcode_macro _gcode_at_layer]
description: Schedules the specified g-code command to be run at the specified
    layer. LAYER=next will cause the command to run at the next layer change. 
    Usage: _GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode> 
                        [CANCEL=<0|1>]
gcode:
    {% set tot_layers = printer.print_stats.info.total_layer %}
    {% if params|length > 0 %}
        _CHECK_IS_PRINTING
        {% set CANCEL = params.CANCEL|default(0)|int != 0 %}
        {% set COMMAND = params.COMMAND|default(None) %}
        
        {% if COMMAND %} # This makes it easier to match commands for cancellation.
            {% set COMMAND = COMMAND.lstrip().split(None, 1) %}
            {% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
        {% endif %}

        {% if "LAYER" in params %}
            {% set cmd_container = "commands_layer" %}
            {% set cur_layer = printer.print_stats.info.current_layer|int %}
            
            {% if "HEIGHT" in params %}
                {action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
            {% elif params.LAYER|string|lower == "next" %}
                {% set LAYER = cur_layer + 1 %}
            {% else %}
                {% set LAYER = params.LAYER|int %}
            {% endif %}
            
            {% if LAYER <= cur_layer %}
                {
                    action_raise_error(
                        "LAYER[%i] must be above current print layer[%i]."
                            | format(LAYER, cur_layer)
                    )
                }
            {% elif tot_layers and LAYER > tot_layers %}
                {
                    action_raise_error(
                        "LAYER[%i] must not be above top layer[%i]."
                            | format(LAYER, tot_layers)
                    )
                }
            {% endif %}
        
            {% set key = LAYER %}
        {% elif "HEIGHT" in params %}
            {% set cmd_container = "commands_height" %}
            {% set HEIGHT = params.HEIGHT|float %}
            {% set cur_height = printer["gcode_macro _layer_run"].cur_height %}
        
            {% if HEIGHT <= cur_height %}
                {
                    action_raise_error(
                        "HEIGHT[%.3f] must be above current print height[%.3f]."
                    )| format(HEIGHT, cur_height)
                }
            {% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
                {
                    action_raise_error(
                        "HEIGHT[%.3f] must be below maximum Z height[%.3f]."
                    )| format(HEIGHT, printer.toolhead.axis_maximum.z)
                }
            {% endif %}
      
            {% set key = HEIGHT %}
        {% else %}
            {action_raise_error("No HEIGHT or LAYER argument provided.")}
        {% endif %}
  
        {% set commands = printer["gcode_macro _layer_run"][cmd_container] %}
    
        {% if key not in commands and not CANCEL %}
            {% set dummy = commands.__setitem__(key, []) %}
        {% endif %}

        {% if CANCEL %}
            {% if key in commands %}
                {% set pos = (
                    "%i"|format(key)) if key is integer else
                        ("%.3fmm"|format(key)
                    ) 
                %}
                
                {% if COMMAND %}
                    {% set dummy = commands[key].remove(COMMAND) %}
                    
                    {% if commands[key]|length == 0 %}
                        {% set dummy = commands.__delitem__(key) %}
                    {% endif %}
          
                    {
                        action_respond_info(
                            "Cancelled %s %s:\n* %s" |format("layer" if k is integer else "height",
                                pos, COMMAND)
                        )
                    }
                {% else %}
                    {% set dummy = commands.__delitem__(key) %}
                    {
                        action_respond_info(
                            "Cancelled all commands at %s %s."
                                |format("layer" if k is integer else "height", pos)
                        )
                    }
                {% endif %}
            {% endif %}
        {% elif not COMMAND %}
            {action_raise_error("No COMMAND argument provided.")}
        {% elif COMMAND in commands[key] %}
            {action_raise_error("Duplicate command previously scheduled.")}
        {% else %}
            {% set dummy = commands[key].append(COMMAND) %}
            {% set pos = ("%i"|format(key)) if key is integer else
                ("%.3fmm"|format(key)) 
            %}
            {
                action_respond_info(
                    "%s %s:\n* %s" 
                        |format("layer" if key is integer else "height", pos, COMMAND)
                )
            }
        {% endif %}
    
        SET_GCODE_VARIABLE MACRO=_layer_run VARIABLE={cmd_container} VALUE="{
            commands|replace('\"','\\\"')
        }"
        _UPDATE_LAYER_COMPAT

    # No arguments means just list all the triggers.
    {% else %}
        {% set output = [] %}
        {% set commands = printer["gcode_macro _layer_run"].commands_layer %}
        {% for key in commands|list|sort %}
            {% set dummy = output.append("layer %i:" | format(key)) %}
            {% for c in commands[key] %}
                {% set dummy = output.append("* %s" | format(c)) %}
            {% endfor %}
        {% endfor %}
        
        {% set commands = printer["gcode_macro _layer_run"].commands_height %}
        {% for key in commands|list|sort %}
            {% set dummy = output.append("height %.3fmm:" | format(key)) %}
            {% for c in commands[key] %}
                {% set dummy = output.append("* %s" | format(c)) %}
            {% endfor %}
        {% endfor %}
    
        {action_respond_info(output|join('\n'))}
    {% endif %}