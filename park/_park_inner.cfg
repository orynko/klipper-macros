[gcode_macro _park_inner]
gcode:
    {% set km = printer["gcode_macro _km_globals"] %}
    {% set travel_speed_xy = km.travel_speed_xy %}
    {% set travel_speed_z = km.travel_speed_z %}

    {% set position = printer.gcode_move.gcode_position %}
    {% set origin = printer.gcode_move.homing_origin%}

    # Use the taller of the highest printed layer or the current Z height, which
    # should help avoid crashes (e.g. when a sequential print in progress).
    {% set clearance_z = (
            printer["gcode_macro _km_layer_run"].clearance_z,
            position.z
        )| max 
    %}
    {% set P = params.P|int %}
    {% set X = params.X|float - origin.x %}
    {% set Y = params.Y|float - origin.y %}
    {% set Z = params.Z|float %}
    {% set LAZY = params.LAZY|int %}

    # Convert everything to absolute coordinates.
    {% if P == 0 %} # Move absolute to Z if below current Z
        {% if clearance_z > Z %}
            {% set Z = clearance_z %}
        {% endif %}
    {% elif P == 1 %} # Move Z absolute.
        {% set Z = Z - origin.z %}
    {% elif P == 2 %} # Move Z relative
        {% set Z = Z + clearance_z %}
    {% else %}
        {
            action_raise_error(
                "Invalid parameter P=%i. Value must be 0, 1, or 2." |format(P)
            ) 
        }
    {% endif %}

    # Clamp to the printer limits.
    {% set Z = (
            (Z, printer.toolhead.axis_maximum.z - origin.z)|min,
            printer.toolhead.axis_minimum.z - origin.z
        )|max 
    %}

    # Don't move if it's a lazy park and we're already in position.
    {% if (not LAZY) or P != 2 or X != position.x or Y != position.y or Z < clearance_z %}
        SAVE_GCODE_STATE NAME=_KM_PARK
        G90
        G0 Z{Z} F{travel_speed_z}
        G0 X{X} Y{Y} F{travel_speed_xy}
        RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
    {% endif %}