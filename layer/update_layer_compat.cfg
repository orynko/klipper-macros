[gcode_macro _update_layer_compat]
gcode:
    {% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
    {% set commands_layer = printer["gcode_macro _layer_run"].commands_layer %}
    {% set keys = commands_layer | sort(reverse=True) %}

    {% set pause_next_layer = {
        'enable'    : False, 
        'call'      : printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call
        } 
    %}
  
    {% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
        {% set dummy = pause_next_layer.__setitem__('enable', True) %}
    {% endif %}
  
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
        pause_next_layer|replace('\"','\\\"') 
    }"

    # Don't just make pause_at_layer a copy of pause_next_layer.
    {% set pause_at_layer = {
        'enable': False,
        'layer': 0,
        'call': printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call
        } 
    %}
    {% if pause_next_layer.enable and pause_next_layer.call == pause_at_layer.call %}
        {% set keys = keys | reject("==", next_layer) %}
    {% endif %}

    # We iterate through the entire reverse sorted key list because Jinja2 doesn't
    # have a filter for dict values. It's ugly, but there should be only a few
    # items in the dict.
    {% for key in keys %}
        {% if pause_at_layer.call in commands_layer[key] %}
            {% set dummy = pause_at_layer.__setitem__('enable', True) %}
            {% set dummy = pause_at_layer.__setitem__('layer', key) %}
        {% endif %}
    {% endfor %}
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
        pause_at_layer|replace('\"','\\\"') 
    }"