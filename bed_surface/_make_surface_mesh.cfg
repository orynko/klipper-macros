[gcode_macro _make_surface_mesh]
description: Generates and saves a mesh to automatically load in PRINT_START.
    Usage: _MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
                            [EXTRUDER=<probing temperature>]
                            [MESH_MULTIPLIER=<integer multiple of mesh density>]
                            [bed_mesh_calibrate parameters]
gcode:
    {% set surfaces = printer.save_variables.variables.bed_surfaces %}
    {% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
  
    {% if SURFACE not in surfaces.available %}
        { action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
    {% endif %}
  
    {% set dummy = params.__setitem__('PROFILE', SURFACE) %}
    {% set BED = params.BED|default(70) | int %}
    {% set km = printer["gcode_macro _km_globals"] %}
    {% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp)|int %}
    {% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}

    M104 S{EXTRUDER}
    M140 S{BED}
    G28

    # Adjust offset before running mesh
    {% if surfaces.available[SURFACE].offset != printer.gcode_move.homing_origin.z %}
        _set_gcode_offset_base Z="{
            surfaces.available[SURFACE].offset
        }" MOVE=1
    {% endif %}

    # If no offset is provided just print out the current offset.
    {% if BED > 0 %}
        {action_respond_info("Stabilizing bed at %iC" | format(BED,))}
        _PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
        
        {% if BED < (printer.heater_bed.temperature - 0.2) %}
            M190 R{BED}
            G4 P{
                (
                    (km.start_bed_heat_delay * 10, 30000)|min,
                    km.start_bed_heat_delay
                )|max
            }
        {% else %}
            G4 P{km.start_bed_heat_delay}
        {% endif %}
    
        M190 R{BED}
    {% endif %}

    {% if EXTRUDER > 0 %}
        _PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
        M109 R{km.start_extruder_probing_temp}
    {% endif %}

    {% if km.start_home_z_at_temp and not bed_at_target %}
        G28 Z # Re-home only the Z axis now that the bed has stabilized.
    {% endif %}

    # Scale the mesh grid size while preserving the original points and relative
    # reference index.
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count
            if not params.PROBE_COUNT else
                params.PROBE_COUNT.split(",")|map('int')|list 
    %}
    {% set dummy = params.__setitem__(
            'PROBE_COUNT',(
                MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
                MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,
            )|join(',')
        ) 
    %}

    BED_MESH_CLEAR
    _BED_MESH_CALIBRATE_FAST {%
        for k in params|reject('in',['BED','SURFACE'])|list %}{
            ' ' ~ k ~ '=' ~ params[k] }{% endfor 
    %}
    SAVE_CONFIG

    # Dummy argument block for Mainsail
    {% set dummy = None if True else "
        {% set dummy = params.MESH_MULTIPLIER|default(2) %}
        {% set dummy = params.SURFACE|default(active surface) %}
        " 
    %} # End argument block for Mainsail