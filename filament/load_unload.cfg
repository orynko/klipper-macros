[gcode_macro _load_unload]
gcode:
    {% set saved_extruder = printer.toolhead.extruder %}
    {% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
    {% set km = printer["gcode_macro _km_globals"] %}
  
    # Use the global min as default if provided, else use per extruder min + 5.
    {% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer else 0 %}
    {% set default_minimum = km.load_min_temp if km.load_min_temp else
        (printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) 
    %}
    {% if 'MINIMUM' in params %}
        {% set MINIMUM = params.MINIMUM|int %}
  
    # This is the special case for a filament change after an idle timeout.
    {% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 
        and printer["gcode_macro resume"].saved_extruder_temp 
    %}
        {% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
  
    # Use the target temp if higher than the default.
    {% elif printer[EXTRUDER].target > default_minimum %}
        {% set MINIMUM = printer[EXTRUDER].target %}
    {% else %}
        {% set MINIMUM = default_minimum %}
    {% endif %}
  
    {% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
        { action_raise_error("Extrude below minimum temp.") }
    {% elif printer.pause_resume.is_paused %}
        # Clear the saved E if we're (un-)loading while paused.
        SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
    {% endif %}
  
    {% set SPEED = params.SPEED|default(km.load_speed)|int %}
    {% set priming_length = km.load_priming_length %}
    {% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
  
    {% if LENGTH < 0 %}
        {% set priming_length = (priming_length + LENGTH, 0)|max %}
        {% set LENGTH = 0 %}
    {% endif %}
    
    SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
  
    {% if EXTRUDER != saved_extruder%}
        ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
    {% endif %}
  
    _PRINT_STATUS ACTION=PUSH_STATUS
  
    {% if not printer.extruder.can_extrude 
        or printer[EXTRUDER].target < default_minimum 
    %}
        {action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
        M109 S{MINIMUM}
    {% endif %}
  
    _PRINT_STATUS ACTION=CHANGE STATUS={
        "filament_load" if params.LOAD|int else "filament_unload"
    }
    M83
    {% set priming_speed = (km.load_priming_speed, SPEED)|min %}
  
    {% if params.LOAD|int %}
        G0 E{LENGTH} F{SPEED}
        G0 E{priming_length} F{priming_speed}
        G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
    {% else %}
        {% set pre_prime_distance = 5.0 %}
        {% set shaping_moves = 5 %}
        {% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
    
        # Push forward to heat up, then retract to the edge of the meltzone.
        G0 E{pre_prime_distance} F{SPEED}
        G4 P500
        G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
    
        # Shape the tip with a pairs of short extrusions and retractions, where
        # the retractions get increasingly longer than the extrusion.
        {% for i in range(1, shaping_moves + 1) %}
            G0 E2 F{priming_speed}
            G0 E-{2 + (0.1 * i)} F{priming_speed}
        {% endfor %}
    
        # Retract the rest of the length.
        G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
    {% endif %}
  
    RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD

    # Beep on completion
    {% for i in range(BEEPS) %}
        M300 P100
        G4 P200
    {% endfor %}
    
    _PRINT_STATUS ACTION=CHANGE STATUS=pop_status