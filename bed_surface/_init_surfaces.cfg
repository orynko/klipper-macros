[gcode_macro _init_surfaces]
gcode:
    {% set km = printer["gcode_macro _config"] %}
    {% if "bed_surfaces" in printer.save_variables.variables %}
        {% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
    {% else %}
        {% set old_surfaces = { 'active' : '', 'available' : {} } %}
    {% endif %}
  
    {% set settings = printer.configfile.settings %}
    {% set new_probe_z = (
            settings.probe|default(settings.bltouch)
                |default(settings.smart_effector)|default({})
        ).z_offset|default(0.0)|float 
    %}
    {% set new_endstop_z = (
            settings.stepper_z|default({})
        ).position_endstop|default(0.0)|float 
    %}
  
    {% if 'endstop_z' not in old_surfaces %}
        {% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
    {% endif %}
  
    {% if 'probe_z' not in old_surfaces %}
        {% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
    {% endif %}
  
    {% set surfaces = { 
            'active'    : '', 
            'available' : {},
            'endstop_z' : old_surfaces.endstop_z,
            'probe_z'   : old_surfaces.probe_z 
        } 
    %}
  
    {% for s in km.bed_surfaces %}
        {% set s = s.split()|join(' ')|lower %}
        {% if s|length > km.bed_surface_max_name_length 
            or s|list|select("in", " \r\n\"\'")|list 
        %}
            {
                action_raise_error(
                    'Invalid surface name "%s". Name must be %d or fewer '
                    'characters and must not include space or quotation characters'
                        |format(s, km.bed_surface_max_name_length)
                )
            }
        {% endif %}
    
        {% if s in old_surfaces.available %}
            {% set dummy = surfaces.available.__setitem__(s, old_surfaces.available[s]) %}
        {% else %}
            {% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
        {% endif %}
    {% endfor %}
  
    {% if old_surfaces.active in surfaces.available %}
        {% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
    {% elif km.bed_surfaces %}
        {% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
    {% endif %}
  
    SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
    _APPLY_BED_SURFACE_OFFSET
  
    {% if new_probe_z != surfaces.probe_z or new_endstop_z != surfaces.endstop_z %}
        { 
            action_respond_info(
                'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
                'to adjust the offset for all saved surfaces by the change differential, '
                'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
                'making changes.'
            ) 
        }
    {% endif %}